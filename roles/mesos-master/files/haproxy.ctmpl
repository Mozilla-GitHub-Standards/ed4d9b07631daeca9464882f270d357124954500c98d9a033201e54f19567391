{{- define "PAAS_FQDN" -}}
    {{- $aws_env := env "AWS_ENV" -}}
    {{- if eq $aws_env "production" -}}
        production.paas.mozilla.community
    {{- else -}}
        staging.paas.mozilla.community
    {{- end -}}
{{- end -}}

global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        maxconn 4000
        stats socket /run/haproxy/admin.sock mode 660 level admin
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        monitor-uri /index.html

        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

{{- $aws_env := env "AWS_ENV" }}

frontend http-in
        bind *:80
        # Redirect http to https
        acl is_http hdr(X-Forwarded-Proto) http
        redirect scheme https code 301 if is_http

        # Set up redirects from Consul k/v
        {{- $redirect_301 := (print "redirects/" $aws_env "/301") -}}
        {{- $redirect_302 := (print "redirects/" $aws_env "/302") }}
        # Permanent redirects
        {{- range ls $redirect_301 }}
        acl redirect-{{ .Key }} hdr(host) -i {{ .Key }}
        http-request redirect prefix http://{{ .Value }} code 301 if redirect-{{ .Key }}
        {{ end }}
        # Temporary redirects
        {{- range ls $redirect_302 }}
        acl redirect-{{ .Key }} hdr(host) -i {{ .Key }}
        http-request redirect prefix http://{{ .Value }} code 302 if redirect-{{ .Key }}
        {{ end }}

        # Services
        {{- range services -}}
        {{- if and (.Tags | contains "public") (.Tags | contains $aws_env) }}
        acl {{ .Name }}-aclrule hdr(host) -i {{.Name}}.{{ template "PAAS_FQDN" }}
        use_backend {{ .Name }}-backend if {{ .Name }}-aclrule

        {{ $servicename := .Name -}}
        {{- $app_ha_rule := (print "apps/" .Name "/" $aws_env "/haproxy-rules") -}}
        {{- range ls $app_ha_rule }}
        acl {{ $servicename }}-custom-aclrule hdr(host) -i {{ .Value }}
        use_backend {{ $servicename }}-backend if {{ $servicename }}-custom-aclrule
        {{ end }}
        {{ end -}}
        {{ end -}}

{{ range services -}}
{{- if and (.Tags | contains "public") (.Tags | contains $aws_env) }}
backend {{ .Name }}-backend
        balance leastconn
        option httpclose
        option forwardfor
        {{ $env_services := (print $aws_env "." .Name) }}
        {{ range service $env_services  }}
        server {{ .ID }} {{ .NodeAddress }}:{{ .Port }} check inter 3000
        {{- end }}
{{ end -}}
{{- end -}}
